<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
    <title>XD blog</title>
    <link>http://www.xavierdupre.fr/blog/xd_blog.html</link>
    <description>new posts from XD blog</description>
    

        <item>
            <title>Unit test, what a relief ?</title>
            <link>http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-07-01</link>
            <guid isPermaLink="true">http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-07-01</guid>
            <description>&lt;p&gt; To be honest, I hesitated. French, English, I was pissed off by own coding (I speak French in that case) but saved by a unit test... &lt;/p&gt; &lt;p&gt; Function signature are a bit tricky in python because this definition does not exist. There is only one function and you have to tweak around the parameters' type. So... this is an example of a case where unit tests were useful to me. &lt;pre class="prettyprint"&gt; def function_nobody(input) : if isinstance (input, list) : for line in list : # .... elif isinstance (input ,str) : with open(input, "r", encoding="utf8") as f : for line in f : # ... &lt;/pre&gt; So basically, the previous function accepts a file or a list. But I wanted it to be more generic and to accept iterators: &lt;pre class="prettyprint"&gt; import collections def function_nobody(input) : if isinstance (input, list) or isinstance (file, collections.Iterable) : for line in list : # .... elif isinstance (input ,str) : with open(input, "r", encoding="utf8") as f : for line in f : # ... &lt;/pre&gt; I added &lt;i&gt;isinstance (file, collections.Iterable)&lt;/i&gt;. But a string falls under that condition which made the second case useless. But because I wrote unit tests, I was able to catch my mistake. I just reverted the two tests: &lt;pre class="prettyprint"&gt; import collections def function_nobody(input) : if isinstance (input ,str) : with open(input, "r", encoding="utf8") as f : for line in f : # ... elif isinstance (input, list) or isinstance (file, collections.Iterable) : for line in list : # .... &lt;/pre&gt; And it worked. I confess I did not lose two much time and I would not have lost any even without unit tests because I would not know my failure. However, I don't want to guess how much crazyness I could have gone through if one of my scripts fails because of that a month, two, three months later. How could I guess it is because of that... &lt;/p&gt; &lt;p&gt; Please do unit testing... Ok, it is late, my style might be overdramatic. But, please remember this when it is your time to experience one of these overdramatic scenarii. (I used the latin plural for scenario, don't know if it works in English). &lt;/p&gt;</description>
            <pubDate>2013-07-01 00:00:00</pubDate>
        </item>

        <item>
            <title>Raw food</title>
            <link>http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-30</link>
            <guid isPermaLink="true">http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-30</guid>
            <description>&lt;p&gt; J'écoutais une émission de radio sur le &lt;i&gt;raw food&lt;/i&gt; aujourd'hui. &lt;a href="http://www.franceinter.fr/emission-on-va-deguster-la-raw-food-ou-cuisine-crue"&gt;On va déguster&lt;/a&gt;. Les invités prétendent que manger la nourriture crue (pas de pain donc) facilite la digestion (70% de notre énergie passerait dans la digestion), permet de dormir deux heures de moins et mieux. Au lieu de faire cuire les graines, il suffit de les faire germer. Ca rend curieux. J'écoutais d'une oreille discrète mais j'ai retenu deux liens : un restaurant à Paris (&lt;a href="http://www.poussepousse.eu/fr/"&gt;Pousse Pousse&lt;/a&gt;), un magasin de graines (&lt;a href="http://www.sol-semilla.fr/accueil"&gt;Sol Semilla&lt;/a&gt;). &lt;/p&gt; &lt;p&gt; Il paraît que la France est à la traîne dans ce domaine. Notre tradition culinaire a la dent dure. Il y a sept, huit ans, on m'avait conseillé un restaurant pour ses sandwitchs exotiques sans préciser qu'il s'agissait de sandwitch &lt;i&gt;raw food&lt;/i&gt;. Je crois que c'était celui-là : &lt;a href="http://www.santropol.com/"&gt;Santropol&lt;/a&gt;. J'avoue avoir été déçu au moment où j'ai vu l'assiette apparaître et puis agréablement surpris par l'étonnante combinaison de légumes râpés. &lt;/p&gt;</description>
            <pubDate>2013-06-30 00:00:00</pubDate>
        </item>

        <item>
            <title>Installer pip pour Python</title>
            <link>http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-24</link>
            <guid isPermaLink="true">http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-24</guid>
            <description>&lt;p&gt; J'ai encore perdu des minutes pour installer le package &lt;a href="http://www.pip-installer.org/en/latest/"&gt;pip&lt;/a&gt; qui permet d'installer tous les autres. Ca a l'air simple vu d'un premier abord sauf qu'il faut installer ses dépendances : &lt;a href="https://pypi.python.org/pypi/setuptools/"&gt;setuptools&lt;/a&gt;. Et comme je ne fais pas ça tous les jours... J'ai perdu du temps à force d'être paresseux et je suis retombé sur cette page : &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Unofficial Windows Binaries for Python Extension Packages&lt;/a&gt; qui m'a permis de tout faire en trois clics. Il faut vraiment que je retienne cette page. &lt;/p&gt;</description>
            <pubDate>2013-06-24 00:00:00</pubDate>
        </item>

        <item>
            <title>Internet et la programmation</title>
            <link>http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-23</link>
            <guid isPermaLink="true">http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-23</guid>
            <description>&lt;p&gt; Je ne me souviens plus de ce qu'était la programmation avant internet. Aujourd'hui, je passe beaucoup de temps à comprendre comment marche un truc précis, je fais une centaine de requête en espérant qu'un autre fou comme moi ait un jour fait face au même problème et qu'il ait de surcroît penser à décrire sa solution. Les forums de discussions sont une source plutôt utiles. Il y a dix ans, internet n'était pas aussi fourni, on cherchait moins et on codait plus. Aujourd'hui, on passe la première partie d'un projet à chercher des briques qu'on pourrait réutiliser. Une fois qu'on les a trouvées, on passe à la seconde phase qui se résume à coder comme un fou. C'est un peu ce que résume le graphe qui suit. &lt;/p&gt; &lt;p&gt; &lt;img src="documents/geek1.png" /&gt; &lt;/p&gt; &lt;p&gt; A la fin, il est possible que tout se déroule comme prévu ou que, comme il arrive souvent, vous ne butiez sur un nouveau problème. Rebelotte, nouvelles séries de requêtes pour comprendre que ce petit détail qu'on n'avait pas gardé pour plus tard en n'anticipant pas sur le fait qu'il pourrait s'avérer redoutable... Et bizarrement, armé de nouveaux mots-clé, on finit par trouver la librairie qui aurait pu vous faire économiser pas mal de temps. &lt;/p&gt; &lt;p&gt; Cela explique la troisème partie. A ce stade, trois options s'offrent à vous. La première est de tout laisser tomber en vous disant qu'un jour quelqu'un aura le courage de surmonter ces épreuves mais que là, étant donné que la vie est courte, on va tout laissant en plan pour aller s'amuser. Ca finit par une bonne cuite pour oublier le temps perdu dans des trucs de geek inutile (la cuite va souvent de paire avec le dénigrement). La seconde est de se plonger dans la documentation du nouvel outil puis de repartir presque de zéro pour se dire finalement qu'au bout de toutes ces épreuves, vous aurez enfin sur les yeux ce que vous aviez en tête au départ, à moins qu'un nouvel obstacle n'apparaisse, un nouvel outil, l'enfer... Dans ce cas, la première tentation refait surface et en général l'emporte. La troisième option est celle des temps anciens : l'ignorance. On s'obstine à poursuivre le chemin déjà commencé et on se dit ce n'est pas une petite difficulté qui va tout remettre en question. Quand il n'y avait pas internet, j'avais souvent tendance à choisir cette dernière option. J'ai codé beaucoup de trucs inutiles mais l'essentiel était de ne pas l'apprendre trop tôt. Et puis ce n'était pas tout-à-fait perdu, j'ai appris pas mal aussi. Mais l'ignorance était vraiment le point important. &lt;/p&gt; &lt;p&gt; C'était pas mal sans internet. Je butais contre une machine pour trouver une solution. Aujourd'hui, je passe plus de temps à déchiffrer des explications succintes trouvées sur des blogs écrites par un développeur qui affirme avoir un bousin qui marche. Une heure après, convaincu que cela marche, je m'aperçois que mon truc et le sien ne fonctionnent pas sur la même version de Python. Ca ne m'étonne pas qu'on y perdent des nuits sur ces conneries. &lt;/p&gt; &lt;p&gt; Je me demande ce que tous ceux qui ont bossé sur le &lt;a href="http://fr.wikipedia.org/wiki/Vasa"&gt;Vasa&lt;/a&gt; ont pensé au moment où ils ont vu leur oeuvre couler juste après la mis à l'eau. &lt;/p&gt;</description>
            <pubDate>2013-06-23 00:00:00</pubDate>
        </item>

        <item>
            <title>A template to create a Python module including Sphinx documentation and a setup</title>
            <link>http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-13</link>
            <guid isPermaLink="true">http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-13</guid>
            <description>&lt;p&gt; My students often struggle to debug their programs when two or three students need to synchronize their versions. A good way to avoid wasting too much time is to use a tool to keep track of the modifications such as &lt;a href="https://github.com/"&gt;github&lt;/a&gt;. It then becomes easy to synchronize multiple versions. &lt;/p&gt; &lt;p&gt; However, students still need to debug the program after a synchronization. A good practice is to write unit tests. Every time, you write a complex function or an easy one, a unit test should be written to ensure its behaviour will not change after many changes. But it means to add a file, to spend some time to do it right, and to frequently run all the unit tests. This is usually too painful when the project will only last a couple of months. Plus, you usually commit yourself to do it only after you went through the nightmare of debugging once. &lt;/p&gt; &lt;p&gt; Last but not least, my students usually do not add documentation to their code. Most of the time, they do not need it because the project is too short to lose track of the modifications and too small to not know it completely. Maybe another reason is because they cannot see a compiled version of the documentation. The best way is to use Sphinx ut using it means spending a couple of hours at least (a lot of more if you do it for the first time). Documentation can also be used to navigate through the program. &lt;/p&gt; &lt;p&gt; For those reasons, I made a kind of template for a Python module. It includes an easy mechanism to add a unit test and to run it. It generates with the documentation with no change and it also generated a setup (gz, exe) with no change either. You can get it here: &lt;a href="http://www.xavierdupre.fr/site2013/index_code.html#code"&gt;Pieces of codes, libraries&lt;/a&gt; (section &lt;i&gt;Code&lt;/i&gt;). After you downloaded it, a page gives the short list of instructions to tweak the template in order to make it yours: &lt;a href="http://www.xavierdupre.fr/app/python_project_template/helpsphinx/README.html#l-readme"&gt;README&lt;/a&gt;. &lt;/p&gt;</description>
            <pubDate>2013-06-13 00:00:00</pubDate>
        </item>

        <item>
            <title>Apprendre la programmation avec la souris (avec Scratch)</title>
            <link>http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-08</link>
            <guid isPermaLink="true">http://www.xavierdupre.fr/blog/xd_blog.html?date=2013-06-08</guid>
            <description>&lt;p&gt; Je cherchais des livres récents sur Python et je suis tombé là dessus : &lt;a href="http://scratch.mit.edu/studios/169078/"&gt;Super Scratch Programming Adventure!: Learn to Program by Making Cool Games!&lt;/a&gt;. Le livre est en anglais mais il présente un outil qui se décline dans toutes les langues et qu'on peut trouver ici : &lt;a href="http://scratch.mit.edu/"&gt;Scratch&lt;/a&gt; et qu'on peut télécharger sur toutes les plateformes ici : &lt;a href="http://scratch.mit.edu/scratch_1.4/"&gt;téléchargement&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; Je suis toujours un peu sceptique sur les outils comme celui-ci. Ils sont soit très simples mais on ne peut pas faire grand chose, soit aussi complexe que d'autres (&lt;a href="http://www.xavierdupre.fr/blog/2013-04-05_nojs.html"&gt;Apprendre à coder en Python : illustration&lt;/a&gt;) avec le désavantage de ne pas pouvoir utiliser plus tard ce qu'on apprend aujourd'hui (tout du moins pas en l'état car c'est une autre syntaxe). Malgré tout, c'est un outil intéressant, il offre une vue plus visuelle sur ce qu'est un algorithme comme cet exemple sur le calcul du PGCD (plus grand diviseur commun) : &lt;a href="http://serge.mehl.free.fr/anx/pgcd_diff_scratch.html"&gt;PGCD avec Scratch&lt;/a&gt;. Avec Scratch, on peut créer une scène et animer relativement facilement plusieurs objets dans cette scène : &lt;a href="http://scratched.media.mit.edu/resources/tutoriel-scratch-th%C3%A9s%C3%A9e-et-le-minotaure"&gt;minotaure&lt;/a&gt;. On peut y ajouter des extensions : &lt;a href="http://fr.flossmanuals.net/arduino/ch031_pour-aller-plus-loin"&gt;S4A : un projet pédagogique&lt;/a&gt;. On peut même trouver une traduction française du tutoriel : &lt;a href="http://scratchfr.free.fr/k1n8g7/RGfinalAugust2209/translate_p.html"&gt;tutoriel en français&lt;/a&gt;. Et si vous avez la flemme de l'installer, vous pouvez l'utiliser en ligne : &lt;a href="http://scratch.mit.edu/projects/editor/?tip_bar=getStarted"&gt;Scratch en ligne&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; Tout est fait pour y être intuitif et ça marche plutôt bien. Cela dit, comme tout langage de programmation, il faudra quelques heures pour arriver à faire vraiment ce qu'on avait en tête au moment de commencer. Il manque selon mon avis deux fonctionnalités. La première serait de pouvoir aisément animer un personnage avec une séquence d'images. Dans scratch, chaque image serait un objet ce qui rend les choses un peut compliquées. L'autre option est de créer des costumes différents mais je ne sais pas trop comment Scratch gère la transparence des images. Il manque aussi les fonctions même s'il est encore possible de contourner l'obstacle : &lt;a href="http://www.youtube.com/watch?v=xWwM9ow0zBQ"&gt;Creating a Function in Scratch using a Variable&lt;/a&gt;. Ce n'est pas l'idéal. L'autre option est d'utiliser &lt;a href="http://snap.berkeley.edu/"&gt;Snap&lt;/a&gt; qui permet de créer ses propres blocs. Je n'ai pas réussi à télécharger l'outil, il est seulement disponible en ligne pour le moment (et en anglais). J'attendrais un peu. &lt;/p&gt; &lt;p&gt; Il n'est pas facile d'apprendre à programmation. Je n'ai pas encore trouvé de représentation qui ne soit pas abstraite. On comprend aisément ce que veut dire répéter une suite d'opérations mais un algorithme comprend souvent plusieurs répétitions, chacune d'entre elles pilotée par une condition différente. Les premiers pas sont plutôt simples comparés à l'assemblage de pas d'un programme qui fait quelque chose d'utile. Cette multitude devient nécessairement abstraite au-delà d'un certain point. &lt;/p&gt; &lt;p&gt; Il y a vingt ans, on enseignait la programmation au lycée avec le &lt;a href="http://fr.wikipedia.org/wiki/LSE_(langage_de_programmation)"&gt;LSE&lt;/a&gt; dont la syntaxe était en français. Il n'a pas survécu probablement parce qu'il était dédié l'enseignement mais ne permettait pas vraiment de faire quoi que ce soit d'utile. Espérons que Scratch suive un destin différent. Et si on n'est pas convaincu, il est toujours possible de créer son propre langage &lt;a href="http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1"&gt;A simple interpreter from scratch in Python&lt;/a&gt;, &lt;a href="http://www.jayconrod.com/posts/38/a-simple-interpreter-from-scratch-in-python-part-2"&gt;part 2&lt;/a&gt;, &lt;a href="http://www.jayconrod.com/posts/39/a-simple-interpreter-from-scratch-in-python-part-3"&gt;part 3&lt;/a&gt;, &lt;a href="http://www.jayconrod.com/posts/40/a-simple-interpreter-from-scratch-in-python-part-4"&gt;part 4&lt;/a&gt;. &lt;/p&gt;</description>
            <pubDate>2013-06-08 00:00:00</pubDate>
        </item>

</channel>
</rss>
